// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  telegramId        Int              @unique
  username          String?
  firstName         String?
  lastName          String?
  points            Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  name              String
  email             String           @unique
  phone             String?
  location          String?
  occupation        String?
  dateOfBirth       DateTime?
  registrationDate  DateTime         @default(now())
  lastLogin         DateTime         @updatedAt
  profilePictureUrl String?
  bio               String?
  socialLinks       SocialLink[]
  achievements      Achievement[]
  dailyActivities   DailyActivity[]
  tasks             Task[]
  habits            Habit[]
  goals             Goal[]
  skillLevels       SkillLevel[]
  learningPaths     LearningPath[]
  fitnessData       FitnessData[]
  nutritionLogs     NutritionLog[]
  sleepLogs         SleepLog[]
  moodLogs          MoodLog[]
  financialData     FinancialData[]
  socialInteractions SocialInteraction[]
  appUsageStats     AppUsageStats[]
  notifications     Notification[]
  feedback          Feedback[]
}

model SocialLink {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  platform String
  url      String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  value       Int
  dateEarned  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model DailyActivity {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime @default(now())
  tasksCompleted Int
  habitStreak    Int
  screenTime     Int // in minutes
  stepsCount     Int
  caloriesBurned Int
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus
  priority    Priority
  createdAt   DateTime @default(now())
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Habit {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  frequency   HabitFrequency
  streak      Int
  startDate   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

model Goal {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  targetDate  DateTime
  progress    Float
  status      GoalStatus
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model SkillLevel {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  skill     String
  level     Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
}

model LearningPath {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  progress    Float
  startDate   DateTime @default(now())
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model FitnessData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  weight    Float?
  height    Float?
  bmi       Float?
  exercise  String?
  duration  Int? // in minutes
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model NutritionLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  mealType  MealType
  foodItems String[]
  calories  Int
  protein   Float
  carbs     Float
  fats      Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model SleepLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime @default(now())
  sleepStart  DateTime
  sleepEnd    DateTime
  quality     Int // 1-10 scale
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model MoodLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  mood      Mood
  note      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

enum Mood {
  VERY_BAD
  BAD
  NEUTRAL
  GOOD
  VERY_GOOD
}

model FinancialData {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime       @default(now())
  type        TransactionType
  amount      Float
  category    String
  description String?
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @db.ObjectId
}

enum TransactionType {
  INCOME
  EXPENSE
}

model SocialInteraction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  platform  String
  action    String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model AppUsageStats {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime @default(now())
  appName       String
  timeSpent     Int // in minutes
  actionsCount  Int
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime         @default(now())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
}

enum NotificationType {
  TASK_DUE
  GOAL_REMINDER
  ACHIEVEMENT_UNLOCKED
  SYSTEM_UPDATE
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  category  String
  content   String
  rating    Int? // 1-5 scale
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}